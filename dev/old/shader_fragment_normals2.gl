precision mediump float;

uniform sampler2D sampler;
uniform vec2 wh;
uniform float H;
varying vec2 fragPos;

const vec2 size=vec2(200,200);

vec3 getPoint(float x, float y, vec2 uv, float dPx, float dPy){
    vec4 t = texture2D(sampler, uv+vec2(x*dPx,y*dPy));
    return vec3(x*dPx*size.x,y*dPy*size.y,H*t.x);
}

void main(void) {
    float dPx=1./(wh.x);
    float dPy=1./(wh.y);
    vec2 uv=fragPos+vec2(.5, .5);
    //vec4 color=texture2D(sampler, uv);

    //vec3 origin=vec3(0.,0.,color.r*H);
    vec3 origin=getPoint(0.,0., uv, dPx, dPy);

    vec3 points[9];
    points[0]=getPoint(-1.,0., uv, dPx, dPy)-origin;
    points[1]=getPoint(-1.,-1., uv, dPx, dPy)-origin;
    points[2]=getPoint(0. ,-1., uv, dPx, dPy)-origin;
    points[3]=getPoint(1. ,-1., uv, dPx, dPy)-origin;
    points[4]=getPoint(1. ,0., uv, dPx, dPy)-origin;
    points[5]=getPoint(1. ,1., uv, dPx, dPy)-origin;
    points[6]=getPoint(0. ,1., uv, dPx, dPy)-origin;
    points[7]=getPoint(-1.,1., uv, dPx, dPy)-origin;
    points[8]=points[0];

    vec3 normals[8];
    int j;
    for (int i=0; i<8; i++){
        vec3 n=cross(points[i],points[i+1]);
        normals[i]=normalize(n);
    }

    //moyenne sur les normales
    vec3 normal=vec3(0.,0.,0.);
    for (int j=0; j<8; j++){
        normal+=normals[j];
    }

    normal/=8.;
   
    normal.xy=0.5+normal.xy*0.5;

    //gl_FragColor=vec4(color.r, normal);
    gl_FragColor=vec4(normal, 1.);

}