/*
* This shader implement shallow water equations
* see http://en.wikipedia.org/wiki/Shallow_water_equations
*
* as a result it gives a floating point RGBA texture
* R channel is used for water height
* G,B,A channels are used for water speed
*/


precision highp float;

uniform sampler2D samplerWater, samplerTerrain;
uniform float dx, dy, dt, rain, gravity, terrainHMax, waterHMax;
uniform vec2 scaleXY;

varying vec2 vUV; 

void main(void) {
    //get data at t from texture
    vec4 waterData=texture2D(samplerWater, vUV);
    float waterHeight=waterHMax*waterData.r;
    vec3 waterSpeed=waterData.gba;

    vec4 terrainData=texture2D(samplerTerrain, vUV);
    float terrainHeight=terrainHMax*terrainData.r;
    vec2 terrainNormal=0.5*(terrainData.gb-vec2(0.5,0.5))*scaleXY/terrainHMax;
    
    //compute wikipedia vars
    float H=terrainHeight; //waterHeight; //total height
    vec2 v=waterSpeed.xy;

    //compute derivatives
    vec2 dx2=vec2(dx,0.);
    vec2 dy2=vec2(0.,dy);

    vec4 DwDx=(-texture2D(samplerWater, vUV+dx2*2.)+8.*texture2D(samplerWater, vUV+dx2)-8.*texture2D(samplerWater, vUV-dx2)+texture2D(samplerWater, vUV-2.*dx2))/(12.*dx*scaleXY.x);

    vec4 DwDy=(-texture2D(samplerWater, vUV+dy2*2.)+8.*texture2D(samplerWater, vUV+dy2)-8.*texture2D(samplerWater, vUV-dy2)+texture2D(samplerWater, vUV-2.*dy2))/(12.*dy*scaleXY.y);

    //vec4 DwDy=(texture2D(samplerWater, vUV+dy2)-texture2D(samplerWater, vUV-dy2))/(12.*dy*scaleXY.y);



    vec2 DhDxy=vec2(DwDx.r, DwDy.r)*waterHMax;
    vec2 DvDx=DwDx.gb;
    vec2 DvDy=DwDy.gb;
    float DvDxy=DvDx.x+DvDy.y;

    //apply shallow water equation
    vec2 dv=-dt*((gravity*(DhDxy-terrainNormal.xy))+0.09*v);
    float dh=-waterHeight*dt*DvDxy;
    
    //raining
    dh+=(1.-smoothstep(0., 0.5, distance(vUV,vec2(0.5,0.5))))* rain * dt;

    //refresh vars
    waterHeight+=dh;
    waterSpeed.xy+=dv;

    //absorption
    waterHeight*=0.9+0.1*smoothstep(0.,0.01,terrainHeight);

    gl_FragColor=vec4(waterHeight/waterHMax,waterSpeed.xy, 1.);
//    gl_FragColor=terrainData;

}