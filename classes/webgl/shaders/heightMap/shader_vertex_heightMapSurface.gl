attribute vec2 position;

uniform mat4 matrice_vue, matrice_projection, matrice_objet;
uniform float hMax, hMaxIsland,  fogDmin, fogDmax;
uniform vec2 scale, centre, scaleIsland, offsetIsland;
uniform sampler2D samplerHeightMap, samplerIsland;

varying float vFog, vAlpha, vHeight;
varying vec2 vUV;
varying vec3 vNormal;

void main(void) {
    vec2 pos2=position*scale+centre;
    vec3 pos=vec3(pos2.x,pos2.y,0.);
    vec4 hmColor=texture2D(samplerHeightMap, position);
    pos.z+=hmColor.r*hMax;

    //smooth border between Lsystem and island :
    vAlpha=smoothstep(0.001,0.01,hmColor.r);

    vec4 islandHM=texture2D(samplerIsland, ((position-vec2(0.5,0.5))*scaleIsland)+offsetIsland);
    pos.z+=islandHM.r*hMaxIsland;

    vec4 posScene=matrice_vue * matrice_objet * vec4(pos, 1.0);
    gl_Position = matrice_projection * posScene;    

    vUV = position;
    vNormal=normalize(hmColor.gba+islandHM.gba-vec3(1.,1.,.5));
    vFog =  1.-smoothstep(fogDmin, fogDmax, length(posScene.xyz));
    vHeight=smoothstep(0.2, 0.5, pos.z);
}