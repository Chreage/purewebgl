precision mediump float;

uniform vec2 scaleUV;
uniform vec3 lightDir, fogColor;
uniform sampler2D sampler, samplerNormals, samplerRivers;

varying float vFog, vAlpha, vHeight;
varying vec2 vUV;
varying vec3 vNormal;

const vec3 Z=vec3(0.,0.,1.);

//normal mapping : retourne la matrice de rotation d'axe u et d'angle theta
mat3 rot_angleAxe(float theta, vec3 u) {
    float c=cos(theta);
    float s=sin(theta);
    return mat3(
        u.x*u.x+(1.-u.x*u.x)*c,  u.x*u.y*(1.-c)-u.z*s,    u.x*u.z*(1.-c)+u.y*s,
        u.x*u.y*(1.-c)+u.z*s,    u.y*u.y+(1.-u.y*u.y)*c,  u.y*u.z*(1.-c)-u.x*s,
        u.x*u.z*(1.-c)-u.y*s,    u.y*u.z*(1.-c)+u.x*s,    u.z*u.z+(1.-u.z*u.z)*c
    );
}

//normal mapping : retourne la matrice de rotation qui envoie u sur v. u et v sont unitaires
mat3 rot_vectVect(vec3 u,vec3 v) {
    vec3 axe=normalize(cross(v,u));
    float theta=acos(dot(u,v));
    return rot_angleAxe(theta, axe);
}


void main(void) {
    vec2 uvScaled=vUV*scaleUV;

    vec4 colorRiver=texture2D(samplerRivers, vUV);

    vec4 color=texture2D(sampler, uvScaled);
    vec4 texture_normale=texture2D(samplerNormals, uvScaled);
    vec3 n=vec3(2.*(texture_normale.x-0.5), 2.*(texture_normale.y-0.5), texture_normale.z);
    mat3 rot=rot_vectVect(Z, normalize(vNormal));
    float Kriver=step(0.1, colorRiver.a)*colorRiver.a;
    vec3 bump_normal=mix(rot*n, vec3(0.,0.,1.1), min(1., Kriver*2.));

    //light intensity
    float I=dot(bump_normal,lightDir);
 
    float alpha=vAlpha*mix(1., vHeight,min(1.,16.*Kriver));

    vec3 col=I*mix(color.rgb, colorRiver.rgb, Kriver);

    gl_FragColor =  vec4(mix(fogColor, col, vFog), alpha);
   
}